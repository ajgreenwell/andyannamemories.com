{"version":3,"sources":["config.js","storage.js","ErrorBanner.js","LoginPortal.js","NavItem.js","NavMenu.js","NavMenuToggle.js","Navbar.js","About.js","PhotoSlideshow.js","Memory.js","MemoriesEditor.js","PublicMemories.js","PrivateMemories.js","App.js","serviceWorker.js","index.js"],"names":["accessKeyId","secretAccessKey","region","storeItem","key","value","window","localStorage","setItem","JSON","stringify","initialState","defaultVal","parse","getItem","ErrorBanner","closeErrorBanner","children","className","onClick","LoginPortal","login","setIsLoginError","useState","passwordValue","setPasswordValue","id","type","onChange","e","target","NavItem","href","handleClick","NavMenu","isLoggedIn","logout","toggleMenu","NavMenuToggle","isOpen","setIsOpen","toggleIsOpen","Navbar","About","Photo","src","idx","alt","Caption","memory","text","writtenMemory","style","display","PhotoSlideshow","memories","photoIdx","setPhotoIdx","changePhotoIdx","changeBy","newPhotoIdx","length","document","querySelector","opacity","hideCaption","showPhoto","showCaption","map","photo","Memory","memoryId","swapMemories","updateMemory","deleteMemory","isEditing","setIsEditing","isDeleting","setIsDeleting","memoryText","setMemoryText","autoFocus","confirmDeleteMemory","MemoriesEditor","isPublic","addMemory","PublicMemories","props","isError","publicMemories","swapPublicMemories","addPublicMemory","updatePublicMemory","deletePublicMemory","PrivateMemories","privateMemories","swapPrivateMemories","addPrivateMemory","updatePrivateMemory","deletePrivateMemory","App","setPublicMemories","setPrivateMemories","photographedMemories","setPhotographedMemories","userIds","setUserIds","setIsLoggedIn","setIsError","isUpdateError","setIsUpdateError","isLoginError","saveMemoriesToDatabase","forEach","userId","AWS","config","update","awsConfig","ddb","DynamoDB","DocumentClient","params","TableName","Key","UpdateExpression","ExpressionAttributeValues","err","_","console","log","saveMemoriesToUser","isMemoryIdxOutOfRange","isIdxTooHigh","swap","array","idx1","idx2","temp","useEffect","scan","Items","allMemories","filter","mapAttr","allUserIds","item","photoMemories","push","getPhotographedMemories","cleanMemories","dirtyMemories","newPublicMemories","slice","newMemory","splice","newPrivateMemories","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eb16a30f.chunk.js","sourcesContent":["export default {\n  accessKeyId: \"AKIAIHTMDK4TJ3W753RQ\",\n  secretAccessKey: \"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\",\n  region: \"us-east-1\"\n};\n\nexport const userId = 'amzn1.ask.account.AH7RB5BFVJFQYUKCIJETYJFJQ6XN3YEM3Y2VRMM2YPW45IQYQ4PTQOXST4VALADEMBIDPUB2L5USBUTT3RQP47CLZX5O26GMGL4KDWFI3RTLTU2ZQ6PK7LAUJTHWN6YDZH6MPFXQKN4VGATYX76CETBVJ2VTJUK3NTSP442VHXV7Z6ZSOCFARBOP3TDYEZB3RM765QK735MCHEQ';\nexport const password = 'iamyoursandyouaremine';","export function getItem(key) {\n  return JSON.parse(window.localStorage.getItem(key));\n}\n\nexport function storeItem(key, value) {\n  window.localStorage.setItem(key, JSON.stringify(value));\n}\n\nexport function initialState(key, defaultVal) {\n  if (!defaultVal) defaultVal = '';\n  try { return getItem(key); }\n  catch { return defaultVal; }\n}","import React from 'react';\nimport './main.css';\n\nexport default function ErrorBanner({closeErrorBanner, children}) {\n  return (\n    <div className=\"error-banner\">\n      <p className=\"error-banner-text\">{children}</p>\n      <button className=\"error-banner-button\" onClick={closeErrorBanner}>\n        <i className=\"error-banner-icon far fa-times-circle\"></i>\n      </button>\n    </div>\n  );\n}","import React, { useState } from 'react';\nimport { password } from './config.js';\nimport './main.css';\n\nexport default function LoginPortal({ login, setIsLoginError }) {\n  const [passwordValue, setPasswordValue] = useState('');\n\n  function tryLogin() {\n    if (password === passwordValue)\n      login();\n    else\n      setIsLoginError(true);\n  }\n\n  return (\n    <div id=\"login-portal\">\n      <div id=\"login-location\"></div>\n      <h1 id=\"login-header\">You Are Not Logged In.</h1>\n      <p id=\"login-subheader\">\n        In order to access your memories, you must enter the password below.\n        If you can't remember the password, just ask Andy.\n      </p>\n      <div id=\"login-form\">\n        <h3 id=\"password-label\">Password:</h3>\n        <input\n          id=\"password-field\"\n          type=\"text\"\n          value={passwordValue}\n          onChange={(e) => setPasswordValue(e.target.value)}\n        />\n        <button id=\"login-button\" onClick={tryLogin} >\n          <i className=\"login-icon fas fa-sign-in-alt\"></i>\n          Login\n        </button>\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport './main.css';\n\nexport default function NavItem({ href, children, handleClick }) {\n  return (<a href={href} className=\"nav-item\" onClick={handleClick}>{children}</a>);\n}","import React from 'react';\nimport NavItem from './NavItem.js';\nimport './main.css';\n\nexport default function NavMenu({ isLoggedIn, logout, toggleMenu }) {\n  function logoutAndToggleMenu() {\n    logout();\n    toggleMenu();\n  }\n\n  return (\n    <div>\n      {isLoggedIn ?\n      <div id=\"nav-menu\">\n        <NavItem href={\"#photo-slideshow-location\"} handleClick={toggleMenu}>photos</NavItem>\n        <NavItem href={\"#public-memories-location\"} handleClick={toggleMenu}>public</NavItem>\n        <NavItem href={\"#private-memories-location\"} handleClick={toggleMenu}>private</NavItem>\n        <NavItem href={\"#login-location\"} handleClick={logoutAndToggleMenu}>logout</NavItem>\n      </div> :\n      <div id=\"nav-menu\">\n        <NavItem href={\"#login-location\"} handleClick={toggleMenu}>login</NavItem>\n      </div>}\n    </div>\n  );\n}","import React, { useState } from 'react';\nimport NavMenu from './NavMenu.js';\nimport './main.css';\n\nexport default function NavMenuToggle({ isLoggedIn, logout }) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  function toggleIsOpen() {\n    setIsOpen(!isOpen);\n  }\n\n  return (\n    <div id=\"nav-menu-toggle\">\n      <button className={isOpen ? 'nav-button-fixed nav-button' : 'nav-button'} onClick={toggleIsOpen}>\n        <i className=\"fas fa-bars\"></i>\n      </button>\n      {isOpen && <NavMenu isLoggedIn={isLoggedIn} logout={logout} toggleMenu={toggleIsOpen}/>}\n    </div>\n  );\n}","import React from 'react';\nimport NavItem from './NavItem.js';\nimport NavMenuToggle from './NavMenuToggle.js';\nimport './main.css';\n\nexport default function Navbar({ isLoggedIn, logout }) {\n  return (\n    <div id=\"navbar\" className=\"container\">\n      <div id=\"nav-left\">\n        <i id=\"logo\" className=\"fas fa-brain\"></i>\n        <div>My Memories</div>\n      </div>\n        {isLoggedIn ?\n        <div id=\"nav-right\">\n          <NavItem href={\"#photo-slideshow-location\"}>photos</NavItem>\n          <NavItem href={\"#public-memories-location\"}>public</NavItem>\n          <NavItem href={\"#private-memories-location\"}>private</NavItem>\n          <NavItem href={\"#login-location\"} handleClick={logout}>logout</NavItem>\n        </div> :\n        <div id=\"nav-right\">\n          <NavItem href={\"#login-location\"}>login</NavItem>\n        </div>\n        }\n      <NavMenuToggle isLoggedIn={isLoggedIn} logout={logout} />\n    </div>\n  );\n}","import React from 'react';\nimport './main.css';\n\nexport default function About() {\n  return (\n    <div id=\"about\">\n      <h1 id=\"about-header\">Welcome to My Memories.</h1>\n      <p id=\"about-subheader\">Use the sections below to view, add, modify or remove memories from your vault.</p>\n    </div>\n  );\n}","import React, { useState } from 'react';\nimport './main.css';\n\nfunction Photo({ src, idx }) {\n  const className = idx === 0 ? 'visible' : 'hidden';\n  return (\n    <img\n      id={`slideshow-photo-${idx}`}\n      className={className}\n      src={src}\n      alt=\"A memory from Andy and Anna's past\"\n    />\n  );\n}\n\nfunction Caption({ memory, idx }) {\n  const className = idx === 0 ? 'visible' : 'hidden';\n  const text = memory.writtenMemory ? memory.writtenMemory : memory.memory;\n  return (\n    <div>\n      <p id={`slideshow-caption-${idx}`} className={className}>{text}</p>\n      {idx === 0 ?\n        <p id={`hidden-caption-${idx}`} style={{display: \"block\"}}>{text}</p> :\n        <p id={`hidden-caption-${idx}`} >{text}</p>\n      }\n    </div>\n  );\n}\n\nexport default function PhotoSlideshow({ memories }) {\n  const [photoIdx, setPhotoIdx] = useState(0);\n\n  function hidePhoto(idx) {\n    const photo = document.querySelector(`#slideshow-photo-${idx}`);\n    photo.style.opacity = \"0%\";\n  }\n\n  function showPhoto(idx) {\n    const photo = document.querySelector(`#slideshow-photo-${idx}`);\n    photo.style.opacity = \"100%\";\n  }\n\n  function hideCaption(idx) {\n    const caption = document.querySelector(`#slideshow-caption-${idx}`);\n    caption.style.opacity = \"0%\";\n    const hiddenCaption = document.querySelector(`#hidden-caption-${idx}`);\n    hiddenCaption.style.display = 'none';\n  }\n\n  function showCaption(idx) {\n    const caption = document.querySelector(`#slideshow-caption-${idx}`);\n    caption.style.opacity = \"100%\";\n    const hiddenCaption = document.querySelector(`#hidden-caption-${idx}`);\n    hiddenCaption.style.display = 'block';\n  }\n\n  function changePhotoIdx(changeBy) {\n    let newPhotoIdx = photoIdx + changeBy;\n    if (newPhotoIdx < 0) newPhotoIdx = memories.length - 1;\n    else if (newPhotoIdx >= memories.length) newPhotoIdx = 0;\n    hidePhoto(photoIdx);\n    hideCaption(photoIdx);\n    showPhoto(newPhotoIdx);\n    showCaption(newPhotoIdx);\n    setPhotoIdx(newPhotoIdx);\n  }\n\n  return (\n    <div>\n      <div id=\"photo-slideshow\" className=\"container\">\n        <div id=\"photo-slideshow-location\"></div>\n        <h2>The Memories You've Captured.</h2>\n        <div id=\"slideshow\">\n          <button className=\"slideshow-button\" onClick={() => changePhotoIdx(-1)}>\n            <i className=\"slideshow-button-icon fas fa-arrow-circle-left\"></i>\n          </button>\n          <div id=\"slideshow-photos\">\n            {memories.map((memory, idx) => <Photo src={memory.photo} idx={memories.length - 1 - idx} key={idx} />)}\n          </div>\n          <button className=\"slideshow-button\" onClick={() => changePhotoIdx(1)}>\n            <i className=\"slideshow-button-icon fas fa-arrow-circle-right\"></i>\n          </button>\n        </div>\n        <div id=\"slideshow-captions\">\n          <i id=\"quote-left\" className=\"fas fa-quote-left\"></i>\n          {memories.map((memory, idx) => <Caption memory={memory} idx={memories.length - 1 - idx} key={idx} />)}\n          <i id=\"quote-right\" className=\"fas fa-quote-right\"></i>\n        </div>\n      </div>\n    </div>\n    \n  );\n}","import React, { useState } from 'react';\nimport './main.css';\n\nexport default function Memory({ memory: { memory }, memoryId, idx, swapMemories, updateMemory, deleteMemory }) {\n  const [isEditing, setIsEditing] = useState(!memory || false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [memoryText, setMemoryText] = useState(memory);\n\n  function saveMemory() {\n    setIsEditing(false);\n    updateMemory(memoryText, idx);\n  }\n\n  function confirmDeleteMemory(idx) {\n    setIsDeleting(false);\n    deleteMemory(idx);\n  }\n\n  return (\n    <div id={memoryId} className=\"memory\" >\n      {isEditing ?\n      <textarea className='memory-input' value={memoryText} onChange={e => setMemoryText(e.target.value)} autoFocus></textarea> :\n      <p className=\"memory-text\">{memoryText}</p>}\n\n      <div className=\"memory-buttons\">\n        <div className=\"memory-buttons-left\">\n          {isEditing ?\n          <button className=\"memory-button\" onClick={saveMemory}>\n            <i className=\"memory-button-icon fas fa-save\"></i>\n            Save\n          </button> :\n          <button className=\"memory-button\" onClick={() => setIsEditing(true)}>\n            <i className=\"memory-button-icon fas fa-edit\"></i>\n            Edit\n          </button>}\n\n          <button className=\"memory-button\" onClick={() => setIsDeleting(true)}>\n            <i className=\"memory-button-icon fas fa-times-circle\"></i>\n            Delete\n          </button>\n        </div>\n        <div className=\"memory-buttons-right\">\n          <button className=\"slideshow-button\" onClick={() => swapMemories(idx - 1, idx)}>\n            <i className=\"slideshow-button-icon fas fa-arrow-circle-up\"></i>\n          </button>\n          <button className=\"slideshow-button\" onClick={() => swapMemories(idx, idx + 1)}>\n            <i className=\"slideshow-button-icon fas fa-arrow-circle-down\"></i>\n          </button>\n        </div>\n      </div>\n      \n      {isDeleting &&\n      <div>\n        <h3 className=\"delete-confirmation-text\">Are you sure you want to delete this memory?</h3>\n        <div>\n          <button className=\"memory-button\" onClick={() => confirmDeleteMemory(idx)}>\n            <i className=\"memory-button-icon fas fa-check-circle\"></i>\n            Yes, Delete this Memory\n          </button>\n          <button className=\"memory-button\" onClick={() => setIsDeleting(false)}>\n            <i className=\"memory-button-icon fas fa-times-circle\"></i>\n            No, Keep this Memory\n          </button>\n        </div>\n      </div>}\n    </div>\n  );\n}","import React from 'react';\nimport Memory from './Memory.js';\nimport './main.css';\n\nexport default function MemoriesEditor({ isPublic, memories, swapMemories, updateMemory, deleteMemory, addMemory }) {\n  return (\n    <div>\n      {memories.map((memory, idx) => {\n        const memoryId = isPublic ? `public-memory-${idx}` : `private-memory-${idx}`;\n        return (\n          <Memory\n           memory={memory}\n           memoryId={memoryId}\n           key={memory.memory}\n           idx={idx}\n           swapMemories={swapMemories}\n           updateMemory={updateMemory}\n           deleteMemory={deleteMemory}\n          />\n        );\n      })}\n      <div className=\"new-memory-container\">\n        <button className=\"new-memory-button\" onClick={addMemory} >\n          <i className=\"new-memory-icon fas fa-plus-circle\"></i>\n          New Memory\n        </button>\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport MemoriesEditor from './MemoriesEditor.js';\nimport './main.css';\n\nexport default function PublicMemories(props) {\n  return (\n    <div>\n      <div id=\"public-memories\" className=\"container\">\n        <div id=\"public-memories-location\"></div>\n        <h2>The Memories You Might Share.</h2>\n        {props.isError ?\n        <p>There was a problem retrieving the memories from your bank. Tell Andy and he can fix the problem.</p> :\n        <MemoriesEditor\n          isPublic={true}\n          memories={props.publicMemories}\n          swapMemories={props.swapPublicMemories}\n          addMemory={props.addPublicMemory}\n          updateMemory={props.updatePublicMemory}\n          deleteMemory={props.deletePublicMemory}\n        />}\n      </div>\n    </div>\n    \n  );\n}","import React from 'react';\nimport MemoriesEditor from './MemoriesEditor.js';\nimport './main.css';\n\nexport default function PrivateMemories(props) {\n  return (\n    <div>\n      <div id=\"private-memories\" className=\"container\">\n        <div id=\"private-memories-location\"></div>\n        <h2>The Memories You Definitely Wouldn't Share.</h2>\n        {props.isError ?\n        <p>There was a problem retrieving the memories from your bank. Tell Andy and he can fix the problem.</p> :\n        <MemoriesEditor\n          isPublic={false}\n          memories={props.privateMemories}\n          swapMemories={props.swapPrivateMemories}\n          addMemory={props.addPrivateMemory}\n          updateMemory={props.updatePrivateMemory}\n          deleteMemory={props.deletePrivateMemory}\n        />}\n      </div>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport AWS from 'aws-sdk';\nimport awsConfig, { userId as rootUserId } from './config.js';\nimport { initialState, storeItem } from './storage.js';\nimport ErrorBanner from './ErrorBanner.js';\nimport LoginPortal from './LoginPortal.js';\nimport Navbar from './Navbar.js';\nimport About from './About.js';\nimport PhotoSlideshow from './PhotoSlideshow.js';\nimport PublicMemories from './PublicMemories.js';\nimport PrivateMemories from './PrivateMemories.js';\nimport './main.css';\n\nexport default function App() {\n  const [publicMemories, setPublicMemories] = useState([]);\n  const [privateMemories, setPrivateMemories] = useState([]);\n  const [photographedMemories, setPhotographedMemories] = useState([]);\n  const [userIds, setUserIds] = useState([]);\n  const [isLoggedIn, setIsLoggedIn] = useState(initialState('isLoggedIn', false));\n  const [isError, setIsError] = useState(false);\n  const [isUpdateError, setIsUpdateError] = useState(false);\n  const [isLoginError, setIsLoginError] = useState(false);\n\n  function getAllMemoriesFromDatabase() {\n    AWS.config.update(awsConfig);\n    let ddb = new AWS.DynamoDB.DocumentClient();\n    let params = { TableName: 'MyMemories' };\n    ddb.scan(params, function(err, { Items }) {\n      if (err) {\n        console.log(\"Error retrieving memories:\", err);\n        setIsError(true);\n      } else {\n        const rootUserItem = Items.filter(({ userId }) => userId === rootUserId)[0];\n        const allMemories = rootUserItem.mapAttr.allMemories;\n        const allUserIds = Items.map(item => item.userId);\n        const photoMemories = getPhotographedMemories(allMemories.cleanMemories);\n        setPublicMemories(allMemories.cleanMemories);\n        setPrivateMemories(allMemories.dirtyMemories);\n        setUserIds(allUserIds);\n        setPhotographedMemories(photoMemories);\n      }\n    });\n  }\n\n  function getPhotographedMemories(memories) {\n    const photoMemories = [];\n    memories.forEach(memory => {\n      if (memory.photo) {\n        photoMemories.push(memory);\n      }\n    });\n    return photoMemories;\n  }\n\n  function saveMemoriesToDatabase(memories, isPublic) {\n    userIds.forEach(userId => saveMemoriesToUser(userId, memories, isPublic));\n  }\n\n  function saveMemoriesToUser(userId, memories, isPublic) {\n    AWS.config.update(awsConfig);\n    let ddb = new AWS.DynamoDB.DocumentClient();\n    let memoryType = isPublic ? 'cleanMemories' : 'dirtyMemories';\n    let params = {\n      TableName: 'MyMemories',\n      Key: {'userId': userId},\n      UpdateExpression: `set mapAttr.allMemories.${memoryType} = :c`,\n      ExpressionAttributeValues: {\n        \":c\": memories\n      }\n    };\n    ddb.update(params, function(err, _) {\n      if (err) {\n        console.log(\"Error retrieving memories:\", err);\n        setIsUpdateError(true);\n      }\n    });\n  }\n\n  function addPublicMemory() {\n    const newPublicMemories = publicMemories.slice();\n    newPublicMemories.push({ memory: '' });\n    const length = newPublicMemories.length;\n    swap(newPublicMemories, length - 1, length - 2);\n    setPublicMemories(newPublicMemories);\n  }\n\n  function addPrivateMemory() {\n    const newPrivateMemories = privateMemories.slice();\n    newPrivateMemories.push({ memory: '' });\n    const length = newPrivateMemories.length;\n    swap(newPrivateMemories, length - 1, length - 2);\n    setPrivateMemories(newPrivateMemories);\n  }\n\n  function updatePublicMemory(newMemory, idx) {\n    const newPublicMemories = publicMemories.slice();\n    newPublicMemories[idx].memory = newMemory;\n    setPublicMemories(newPublicMemories);\n    saveMemoriesToDatabase(newPublicMemories, true);\n  }\n\n  function updatePrivateMemory(newMemory, idx) {\n    const newPrivateMemories = privateMemories.slice();\n    newPrivateMemories[idx].memory = newMemory;\n    setPrivateMemories(newPrivateMemories);\n    saveMemoriesToDatabase(newPrivateMemories, false);\n  }\n\n  function deletePublicMemory(idx) {\n    const newPublicMemories = publicMemories.slice();\n    newPublicMemories.splice(idx, 1);\n    setPublicMemories(newPublicMemories);\n    saveMemoriesToDatabase(newPublicMemories, true);\n  }\n\n  function deletePrivateMemory(idx) {\n    const newPrivateMemories = privateMemories.slice();\n    newPrivateMemories.splice(idx, 1);\n    setPrivateMemories(newPrivateMemories);\n    saveMemoriesToDatabase(newPrivateMemories, false);\n  }\n\n  function swapPublicMemories(idx1, idx2) {\n    if (isMemoryIdxOutOfRange(idx1, true) || isMemoryIdxOutOfRange(idx2, true))\n      return;\n    const newPublicMemories = publicMemories.slice();\n    swap(newPublicMemories, idx1, idx2);\n    setPublicMemories(newPublicMemories);\n    saveMemoriesToDatabase(newPublicMemories, true);\n  }\n\n  function swapPrivateMemories(idx1, idx2) {\n    if (isMemoryIdxOutOfRange(idx1, false) || isMemoryIdxOutOfRange(idx2, false))\n      return;\n    const newPrivateMemories = privateMemories.slice();\n    swap(newPrivateMemories, idx1, idx2);\n    setPrivateMemories(newPrivateMemories);\n    saveMemoriesToDatabase(newPrivateMemories, false);\n  }\n\n  function isMemoryIdxOutOfRange(idx, isPublic) {\n    const isIdxTooHigh = isPublic ? idx >= publicMemories.length : idx >= privateMemories.length;\n    return idx < 0 || isIdxTooHigh;\n  }\n\n  function swap(array, idx1, idx2) {\n    const temp = array[idx1];\n    array[idx1] = array[idx2];\n    array[idx2] = temp;\n  }\n\n  function login() {\n    setIsLoginError(false);\n    setIsLoggedIn(true);\n    storeItem('isLoggedIn', true);\n  }\n\n  function logout() {\n    setIsLoggedIn(false);\n    storeItem('isLoggedIn', false);\n  }\n\n  useEffect(getAllMemoriesFromDatabase, []);\n\n  return (\n    <div>\n      {isUpdateError && \n      <ErrorBanner closeErrorBanner={() => setIsUpdateError(false)}>\n        There was a problem saving your memory to the database.\n        Tell Andy and he can fix the problem.\n      </ErrorBanner>}\n      {isLoginError &&\n      <ErrorBanner closeErrorBanner={() => setIsLoginError(false)}>\n        The password you entered is incorrect. Please try again.\n      </ErrorBanner>}\n      <Navbar isLoggedIn={isLoggedIn} logout={logout} />\n      <About />\n      {isLoggedIn ?\n      <div>\n        <PhotoSlideshow memories={photographedMemories} />\n        <PublicMemories\n          isError={isError}\n          publicMemories={publicMemories}\n          addPublicMemory={addPublicMemory}\n          updatePublicMemory={updatePublicMemory}\n          deletePublicMemory={deletePublicMemory}\n          swapPublicMemories={swapPublicMemories}\n        />\n        <PrivateMemories\n          isError={isError}\n          privateMemories={privateMemories}\n          updatePrivateMemory={updatePrivateMemory}\n          addPrivateMemory={addPrivateMemory}\n          deletePrivateMemory={deletePrivateMemory}\n          swapPrivateMemories={swapPrivateMemories}\n        />\n      </div> :\n      <LoginPortal login={login} setIsLoginError={setIsLoginError} />}\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}